import streamlit as st
import os
from ultralytics import YOLO
from VideoProcessor import MediaProcessor, process_media

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
def create_folders(upload_folder="uploaded_files", processed_folder="processed_files"):
    if not os.path.exists(upload_folder):
        os.makedirs(upload_folder)
    if not os.path.exists(processed_folder):
        os.makedirs(processed_folder)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
def save_uploaded_file(uploaded_file, folder_name="uploaded_files"):
    file_path = os.path.join(folder_name, uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    return file_path

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–æ–≤–∫–æ–π
def display_file(selected_file, folder_name="processed_files"):
    file_path = os.path.join(folder_name, selected_file)
    if selected_file.endswith('.mp4'):
        st.video(file_path)
    else:
        st.image(file_path, use_column_width=True)

def exclude_processed_files(file_list, processed_files):
    #print(f'–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {processed_files}')
    #print(f'basename: {os.path.basename(file_list[0].name)} –∏–ª–∏ {file_list[0].name}')
    return [file for file in file_list if os.path.basename(file.file_id) not in processed_files]

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main(processor):
    if 'processed_files' not in st.session_state:
        st.session_state.processed_files = []
    if 'variants' not in st.session_state:
        st.session_state.variants = []

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    create_folders()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ", accept_multiple_files=True)
    #print(f'uploaded_files: {uploaded_files}')
    if uploaded_files:
        input_paths = []
        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        #print(st.session_state.processed_files)
        new_files = exclude_processed_files(uploaded_files, st.session_state.processed_files)
        #print(f'new_files: {new_files}')
        for uploaded_file in new_files:
            file_path = save_uploaded_file(uploaded_file)
            input_paths.append(file_path)
        if input_paths:
            st.toast(f"–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã", icon="üü¢")
            imgs, vids = process_media(input_paths, processor)
            #print(f'input_paths: {input_paths}')
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏, –Ω–æ –±–µ–∑ –ø–∞–ø–∫–∏
            new_variants = [os.path.basename(i) for i in imgs + vids]
            st.session_state.variants.extend(new_variants)
            st.toast(f"–§–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã", icon="üü¢")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ processed_files
            st.session_state.processed_files.extend([os.path.basename(i.file_id) for i in new_files])
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    st.session_state.variants = list(set(st.session_state.variants))

    # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    if st.session_state.variants:
        selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", st.session_state.variants)
        # –¶–µ–Ω—Ç—Ä–æ–≤–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if selected_file:
            st.markdown(
                """
                <style>
                .centered {
                    display: flex;
                    justify-content: center;
                }
                </style>
                """,
                unsafe_allow_html=True
            )
            st.markdown('<div class="centered">', unsafe_allow_html=True)
            display_file(selected_file)
            st.markdown('</div>', unsafe_allow_html=True)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    model_path = 'trained_y8m.pt'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    processor = MediaProcessor('processed_files', model_path, batch_size=16)

    main(processor)